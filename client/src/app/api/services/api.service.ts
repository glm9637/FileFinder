/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { Article } from '../models/article';
import { Bom } from '../models/bom';
import { getArticle } from '../fn/operations/get-article';
import { GetArticle$Params } from '../fn/operations/get-article';
import { getArticleFiles } from '../fn/operations/get-article-files';
import { GetArticleFiles$Params } from '../fn/operations/get-article-files';
import { getBom } from '../fn/operations/get-bom';
import { GetBom$Params } from '../fn/operations/get-bom';
import { getFile } from '../fn/operations/get-file';
import { GetFile$Params } from '../fn/operations/get-file';
import { uploadFile } from '../fn/operations/upload-file';
import { UploadFile$Params } from '../fn/operations/upload-file';

@Injectable({ providedIn: 'root' })
export class ApiService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getArticle()` */
  static readonly GetArticlePath = '/article/{number}';

  /**
   * Query a article.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getArticle()` instead.
   *
   * This method doesn't expect any request body.
   */
  getArticle$Response(params: GetArticle$Params, context?: HttpContext): Observable<StrictHttpResponse<Article>> {
    return getArticle(this.http, this.rootUrl, params, context);
  }

  /**
   * Query a article.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getArticle$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getArticle(params: GetArticle$Params, context?: HttpContext): Observable<Article> {
    return this.getArticle$Response(params, context).pipe(
      map((r: StrictHttpResponse<Article>): Article => r.body)
    );
  }

  /** Path part for operation `getBom()` */
  static readonly GetBomPath = '/article/{number}/bom';

  /**
   * get a bom of the article.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getBom()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBom$Response(params: GetBom$Params, context?: HttpContext): Observable<StrictHttpResponse<Bom>> {
    return getBom(this.http, this.rootUrl, params, context);
  }

  /**
   * get a bom of the article.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getBom$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBom(params: GetBom$Params, context?: HttpContext): Observable<Bom> {
    return this.getBom$Response(params, context).pipe(
      map((r: StrictHttpResponse<Bom>): Bom => r.body)
    );
  }

  /** Path part for operation `getArticleFiles()` */
  static readonly GetArticleFilesPath = '/article/{number}/file';

  /**
   * get the default files for the article.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getArticleFiles()` instead.
   *
   * This method doesn't expect any request body.
   */
  getArticleFiles$Response(params: GetArticleFiles$Params, context?: HttpContext): Observable<StrictHttpResponse<Article>> {
    return getArticleFiles(this.http, this.rootUrl, params, context);
  }

  /**
   * get the default files for the article.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getArticleFiles$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getArticleFiles(params: GetArticleFiles$Params, context?: HttpContext): Observable<Article> {
    return this.getArticleFiles$Response(params, context).pipe(
      map((r: StrictHttpResponse<Article>): Article => r.body)
    );
  }

  /** Path part for operation `uploadFile()` */
  static readonly UploadFilePath = '/article/{number}/file';

  /**
   * uploads a new file to the specified article.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadFile()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadFile$Response(params: UploadFile$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return uploadFile(this.http, this.rootUrl, params, context);
  }

  /**
   * uploads a new file to the specified article.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadFile$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadFile(params: UploadFile$Params, context?: HttpContext): Observable<void> {
    return this.uploadFile$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getFile()` */
  static readonly GetFilePath = '/article/{number}/file/{path}';

  /**
   * get the specified file.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getFile()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFile$Response(params: GetFile$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    return getFile(this.http, this.rootUrl, params, context);
  }

  /**
   * get the specified file.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getFile$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFile(params: GetFile$Params, context?: HttpContext): Observable<Blob> {
    return this.getFile$Response(params, context).pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

}
